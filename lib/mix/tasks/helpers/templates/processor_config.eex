import Config

config :procon, Processors,
  "Elixir.<%= @processor_name %>": [
    deps: [
      # add your deps here, they will be merged with mix.exs deps
    ],
    consumers: [
      %{
        datastore: <%= @repository %>,
        # dynamic_topics_autostart_consumers: true | false # autostart dynamic topics when they are stored in datastore
        # dynamic_topics_filters: [%{processor: "origin_processor", entity: "entity_name_from_processor", (optional)autostart: true | false}] # tuples in this list will store in database the dynamic topics created by others processors
        # group_id: "", # you can add something here to change the consumer group name send to kafka
        name: <%= @processor_name %>,
        entities: [
          # %{
          # event_version: 1,
          # keys_mapping: %{},
          # master_key: {:topic_name, :topic_name},
          # messages_controller: Procon.MessagesController.DynamicTopics,
          # model: Procon.Schemas.DynamicTopic,
          # topic: "procon-dynamic-topics"
          # },
          # %{
          #   dynamic_topic: true, # optional: use it if you need to listen topics by pattern
          #   event_version: 1,
          #   keys_mapping: %{key_from_event: :key_in_your_schema}, # optional
          #   master_key: {:processor_schema_key, :key_from_event}, # optional
          #   messages_controller: MessageControllerToHandleMessage, # optional
          #   model: YourEctoSchemaModule,
          #   realtime_builder: fn # optional: if specified, will send a realtime event when a message is received
          #     :created, event_data -> %Procon.Schemas.ProconRealtime{session_id: nil, channel: "<%= @entity_name %>"}
          #     :updated, event_data -> %Procon.Schemas.ProconRealtime{session_id: nil, channel: "<%= @entity_name %>/#{entity.id}"}
          #     :deleted, event_data -> %Procon.Schemas.ProconRealtime{session_id: nil, channel: "<%= @entity_name %>"}
          #   end,
          #   message_processed_hook: fn # optional: if specified, will be called when the message is processed
          #     event_data, action_type, options -> {:ok, event_data}
          #   end,
          #   topic: "the_topic_to_listen" # if "dynamic_topic: true", procon will start all topics in procon_dynamic_topics table starting with this string
          # }
        ]
      }
    ],
    producers: %{
      datastore: <%= @repository %>,
      relation_topics: %{
        :<%= @entity_name %> =>
        {:id, :"<%= @topic %>"}
      }
    }
  ]

if [__DIR__, "#{config_env()}.exs"] |> Path.join() |> File.exists?(),
  do: import_config("#{config_env()}.exs")